/**
 *
 * auto generated by ibatis tools 
 *
 **/
package com.pay.txncore.dao.impl;

import java.util.HashMap;
import java.util.Map;

import com.pay.inf.dao.impl.BaseDAOImpl;
import com.pay.txncore.dao.ChannelOrderDAO;
import com.pay.txncore.dto.ChannelOrderDTO;
import com.pay.txncore.model.ChannelOrder;
import com.pay.util.BeanConvertUtil;

public class ChannelOrderDAOImpl extends BaseDAOImpl implements ChannelOrderDAO {

	@Override
	public ChannelOrder findByChannelProtocolNo(Long channelProtocolNo) {
		ChannelOrder depositProtocol = (ChannelOrder) super
				.findById(channelProtocolNo);
		return depositProtocol;
	}

	@Override
	public ChannelOrder findAndLockById(Long depositProtocolNo) {
		ChannelOrder depositProtocol = (ChannelOrder) getSqlMapClientTemplate()
				.queryForObject("channelOrder.findAndLockByProtocolId",
						depositProtocolNo);
		return depositProtocol;
	}

	@Override
	public int replyStatusForConsumeCard(Long depositProtocolNo, Long amount) {
		Map paramMap = new HashMap();
		paramMap.put("depositProtocolNo", depositProtocolNo);
		paramMap.put("amount", amount);
		return getSqlMapClientTemplate().update(
				"channelOrder.updateStatusForConsumeCard", paramMap);
	}

	@Override
	public ChannelOrder findByTradeOrderNo(Long paymentOrderNo) {
		ChannelOrder depositProtocol = (ChannelOrder) super
				.findObjectByCriteria("findByDepositOrderNo", paymentOrderNo);
		return depositProtocol;
	}

	/**
	 * 
	 */
	public ChannelOrder queryByTradeDateAndAuthorisation(String orgCode,
			String tradeDate, String authorisation) {
		Map paraMap = new HashMap();
		//paraMap.put("orgCode", orgCode);
		paraMap.put("tradeDate", tradeDate);
		paraMap.put("authorisation", authorisation);
		ChannelOrder channelOrder = (ChannelOrder) super.findObjectByCriteria(
				"queryByTradeDateAndAuthorisation", paraMap);
		return channelOrder;
	}
}
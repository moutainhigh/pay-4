/**
 *
 * auto generated by ibatis tools 
 *
 **/
package com.pay.txncore.dao.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.pay.inf.dao.Page;
import com.pay.inf.dao.impl.BaseDAOImpl;
import com.pay.txncore.dao.DepositOrderDAO;
import com.pay.txncore.model.DepositOrder;
import com.pay.txncore.model.DepositOrderDetail;

@SuppressWarnings("unchecked")
public class DepositOrderDAOImpl extends BaseDAOImpl implements DepositOrderDAO {

	@Override
	public void updateOrgCode(String orgcode, Long id) {
		Map<String, String> params = new HashMap<String, String>();
		params.put("depositOrderNo", String.valueOf(id));
		params.put("orgCode", orgcode);

		super.update("updateOrgCode", params);
	}

	@Override
	public DepositOrder queryDepositOrderForUpdate(Long paymentOrderNo) {

		return (DepositOrder) super.findObjectByCriteria(
				"findByPaymentOrderNoForUpdate", paymentOrderNo);
	}

	@Override
	public DepositOrder findAndLockById(Long depositOrderNo) {

		return (DepositOrder) super.findObjectByCriteria(
				"findAndLockByOrderId", depositOrderNo);
	}

	@Override
	public boolean updateAmount(Long depositOrderNo, Long amount, Integer opeate) {
		Map<String, String> queryParams = new HashMap<String, String>();
		queryParams.put("depositOrderNo", depositOrderNo.toString());
		queryParams.put("amount", amount.toString());
		if (opeate <= 0) {
			return super.update("updateSubBackAmount", queryParams);
		} else if (opeate > 0) {

			return super.update("updateAddBackAmount", queryParams);
		}
		return false;

	}

	@Override
	public List<DepositOrderDetail> queryDepositOrder(
			Map<String, Object> paramMap, Page page) throws Exception {

		return super.findByCriteria("queryDepositOrder", paramMap, page);
	}

	@SuppressWarnings("rawtypes")
	@Override
	public String[] countQueryDepositOrder(Map<String, Object> paramMap)
			throws Exception {
		Map retMap = (Map) getSqlMapClientTemplate().queryForObject(
				"depositOrder.queryDepositOrderCount", paramMap);
		if (retMap == null)
			return null;
		String[] ret = new String[2];
		ret[0] = retMap.get("TOTAL_NUM").toString();

		String tmp = retMap.get("DEPOSIT_AMOUNT").toString();
		ret[1] = new BigDecimal(tmp).divide(new BigDecimal(1000))
				.setScale(2, BigDecimal.ROUND_HALF_UP).toString();

		return ret;
	}

	@Override
	public DepositOrderDetail queryDepositOrderDetail(
			Map<String, Object> paramMap) throws Exception {
		return (DepositOrderDetail) getSqlMapClientTemplate().queryForObject(
				"depositOrder.queryDepositOrderDetail", paramMap);
	}

	@Override
	public DepositOrder findByCustomerAndOrgcode(Map<String, Object> paramMap)
			throws Exception {
		return (DepositOrder) getSqlMapClientTemplate().queryForObject(
				"depositOrder.queryByCustomerAndOrgcode", paramMap);
	}

	@Override
	public DepositOrder findByPaymentOrderNo(Long paymentOrderNo) {
		return (DepositOrder) super.findObjectByCriteria("findByPaymentOrderNo",
				paymentOrderNo);
	}
}
/**
 *
 * auto generated by ibatis tools 
 *
 **/
package com.pay.rm.service.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.pay.inf.dao.impl.BaseDAOImpl;
import com.pay.rm.service.dao.GatewayIpBlacklistDAO;
import com.pay.rm.service.model.GatewayIpBlacklist;

public class GatewayIpBlacklistDAOImpl extends BaseDAOImpl<GatewayIpBlacklist>
		implements GatewayIpBlacklistDAO {

	private final Log logger = LogFactory
			.getLog(GatewayIpBlacklistDAOImpl.class);

	@Override
	public List<GatewayIpBlacklist> queryIpBlackList(
			HashMap<String, String> params, int pageSize, int pageNo) {
		int offset = (pageNo - 1) * pageSize;
		List<GatewayIpBlacklist> listIpBlack = getSqlMapClientTemplate()
				.queryForList("gatewayipblacklist.queryIpBlackList", params,
						offset, pageSize);
		return listIpBlack;
	}

	@Override
	public List<GatewayIpBlacklist> queryIpBlackList(
			HashMap<String, String> params) {
		List<GatewayIpBlacklist> listIpBlack = getSqlMapClientTemplate()
				.queryForList("gatewayipblacklist.queryIpBlackList", params);
		return listIpBlack;
	}

	@Override
	public int coutIpBlackList(HashMap<String, String> params) {
		Object obj = getSqlMapClientTemplate().queryForObject(
				"gatewayipblacklist.queryIpBlackListCount", params);
		if (obj != null)
			return Integer.parseInt(obj.toString());
		return 0;
	}

	@Override
	public boolean isExistIpBlack(String ipaddr, String status) {
		GatewayIpBlacklist gatewayIpBlack = new GatewayIpBlacklist();
		gatewayIpBlack.setIpAddress(ipaddr);
		if (!(null == status) && !("".equals(status))) {
			gatewayIpBlack.setStatus(status);
		}
		logger.info(gatewayIpBlack.getStatus());
		Object obj = getSqlMapClientTemplate().queryForObject(
				"gatewayipblacklist.findBySelective", gatewayIpBlack);
		if (obj != null && ((GatewayIpBlacklist) obj).getIpBlacklistNo() > 0)
			return true;
		return false;
	}

	@Override
	public boolean updateStatus(String ipBlackNo, String status) {
		Map<String, String> queryParams = new HashMap<String, String>();
		queryParams.put("ipBlackNo", ipBlackNo);
		if (status.equals("2")) {
			return getSqlMapClientTemplate().update(
					"gatewayipblacklist.disableIpBlack", queryParams) == 1;
		} else if (status.equals("1")) {
			return getSqlMapClientTemplate().update(
					"gatewayipblacklist.enableIpBlack", queryParams) == 1;
		}
		return false;
	}
}